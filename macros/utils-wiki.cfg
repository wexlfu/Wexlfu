#textdomain wesnoth-Wexlfu-7.1.0

# Utility macros taken from the Wesnoth wiki.

#define FIND_NEARBY FILTER X Y LIMIT
	# Does a search for a nearby location that matches the given filter.
	# Basically just looks for such a location with increasing radius until it
	# finds at least one. This is sadly inefficient, but implementing BFS in
	# WML is... difficult. Once LIMIT is reached, the entire map is searched.
	# This macro creates the 'nearby_locations' and 'nearby_distance'
	# variables, which can be used to access a list of locations found and the
	# distance to those locations, respectively. They should eventually be
	# cleared, which can be accomplished using the CLEANUP_SEARCH macro.
	[clear_variable]
		name=nearby_locations
	[/clear_variable]
	[set_variable]
		name=nearby_distance
		value=0
	[/set_variable]
	[while]
		[not]
			[variable]
				name=nearby_locations.length
				greater_than=0
			[/variable]
		[/not]
		[and]
			[variable]
				name=nearby_distance
				less_than={LIMIT}
			[/variable]
		[/and]
		[do]
			{DEBUG "Searching depth $nearby_distance around ({X}, {Y})..."}
			[store_locations]
				variable=nearby_locations
				{FILTER}
				[and]
					x,y={X},{Y}
					radius=$nearby_distance
				[/and]
			[/store_locations]
			{DEBUG "...found $nearby_locations.length locations."}
			[set_variable]
				name=nearby_distance
				add=1
			[/set_variable]
		[/do]
	[/while]
	[if]
		[variable]
			name=nearby_locations.length
			equals=0
		[/variable]
		[then]
			[store_locations]
				variable=nearby_locations
				{FILTER}
			[/store_locations]
		[/then]
	[/if]
#enddef

#define FIND_NEARBY_CLEANUP
	# Clears variables involved in searching (the FIND_NEARBY macro). Put this
	# in your name=victory,defeat tag to clean up if you use FIND_NEARBY within
	# a scenario.
	[clear_variable]
		name=nearby_locations, nearby_distance
	[/clear_variable]
#enddef


#define FILL_ROLE_RECALL SIDE ROLE FILTER BACKUP_FILTER TYPE X Y
	# Recalls the first unit on side SIDE matching FILTER and assigns it the
	# role ROLE. If no such unit exists, it tries to find a unit that matches
	# the given BACKUP_FILTER on SIDE's recall list, and if it can't, it tries
	# to find any unit on side SIDE's recall list. If SIDE has no units on its
	# recall list, a unit is spawned of type TYPE to fill the role. If the role
	# is already filled, this does nothing. If the given location is
	# unavailable, the nearest empty location will be used.
	[if]
		[have_unit]
			side={SIDE}
			x,y={X},{Y}
		[/have_unit]
		[then]
			{FIND_NEARBY ([not]
			[filter]
			[/filter]
		[/not]) {X} {Y} 30}
		[set_variable]
			name=fill_role_recall_target_x
			to_variable=nearby_locations[0].x
		[/set_variable]
		[set_variable]
			name=fill_role_recall_target_y
			to_variable=nearby_locations[0].y
		[/set_variable]
		[clear_variable]
			name=nearby_locations
		[/clear_variable]
	[/then]
	[else]
		[set_variable]
			name=fill_role_recall_target_x
			value={X}
		[/set_variable]
		[set_variable]
			name=fill_role_recall_target_y
			value={Y}
		[/set_variable]
	[/else]
[/if]
[if]
	[not]
		[have_unit]
			side={SIDE}
			role={ROLE}
		[/have_unit]
	[/not]
	[then]
		[recall]
			show=no
			side={SIDE}
			x,y=$fill_role_recall_target_x,$fill_role_recall_target_y
			{FILTER}
		[/recall]
		[role]
			role={ROLE}
			side={SIDE}
			x,y=$fill_role_recall_target_x,$fill_role_recall_target_y
			{FILTER}
		[/role]
	[/then]
[/if]
[if]
	[not]
		[have_unit]
			side={SIDE}
			role={ROLE}
		[/have_unit]
	[/not]
	[then]
		[recall]
			show=no
			side={SIDE}
			x,y=$fill_role_recall_target_x,$fill_role_recall_target_y
			{BACKUP_FILTER}
		[/recall]
		[role]
			role={ROLE}
			side={SIDE}
			{BACKUP_FILTER}
			x,y=$fill_role_recall_target_x,$fill_role_recall_target_y
		[/role]
	[/then]
[/if]
[if]
	[not]
		[have_unit]
			side={SIDE}
			role={ROLE}
		[/have_unit]
	[/not]
	[then]
		[recall]
			show=no
			side={SIDE}
			x,y=$fill_role_recall_target_x,$fill_role_recall_target_y
		[/recall]
		[role]
			role={ROLE}
			side={SIDE}
			x,y=$fill_role_recall_target_x,$fill_role_recall_target_y
		[/role]
	[/then]
[/if]
[if]
	[not]
		[have_unit]
			side={SIDE}
			role={ROLE}
		[/have_unit]
	[/not]
	[then]
		[unit]
			side={SIDE}
			type={TYPE}
			x,y=$fill_role_recall_target_x,$fill_role_recall_target_y
			generate_name=yes
			random_gender=yes
			random_traits=yes
			role={ROLE}
		[/unit]
	[/then]
[/if]
[clear_variable]
	name=fill_role_recall_target_x,fill_role_recall_target_y
[/clear_variable]
{FIND_NEARBY_CLEANUP}
#enddef
